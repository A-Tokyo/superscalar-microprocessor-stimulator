// This is the template of a stimulator input
// Your comments should be prefixed with // and be on a standalone line
// The assembler is case insensitive and space insensitive regarding the arguments
// The key word must be followed with a space, ie JMP reg0,  reg1
// For stimulator initialization inputs, the JSONS are case sensitive for the key as normal
// The normal key: value format however is case insensitive and space insensitive
//
// TODO Initialize memory hierarchy here as follows, must start with a header Memory Hierarchy
Memory  Hierarchy
  number of cache levels: 2
  {   S : 64,  L: 8 , M: 4, writePolicyHit: write through, writePolicyMiss: writeBack, cycles: 32 }
  {   S : 128,  L: 32 , M: 1, writePolicyHit: write through, writePolicyMiss: writeBack, cycles: 50 }
 memory cycles: 12
//
//Initialize hardware organization here as follows
Hardware Organization
  pipeline width : 12
  instruction buffer size: 8
rob size: 12
//
// TODO Functional Units Information goes here
// THIS SHOULD BE A VALID JSON, order doesn't matter as long as you follow the key format
  {add: {addRS: 4,addCycles: 3}, mul: {mulRS: 3, mulCycles: 4}, lw:{lwRS: 5, lwCycles: 6}, jalr:{jalrRS: 7, jalrCycles: 8}}
//
// Your assembly code goes here it must start with "Assembly" and end with "endAssembly"
// start your code with .org "number which is the memory index"
Assembly
  .org 10
  addi reg1, reg0, 27
  addi reg2, reg0, 28
  addi reg4, reg0, 29
  jmp reg2, 0
  addi reg3, reg0, 5
 	beq reg2, reg3, 3
 	jalr reg5, reg4
  addi reg4, reg0, 30
  addi reg4, reg0, 30
 addi reg4, reg0, 30
  ret reg5
endAssembly
//
// TODO Write your program data here if any must start with the header "program data"
// The data format must be in address:value
program data
  27 : 1001100110011001
  28 : 1001100110011001
  29 : 1001100110011001
  30 : 1001100110011001
end data
// END OF FILE
